{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\narut\\\\Documents\\\\Full Web Code Path\\\\Final Project\\\\client\\\\src\\\\pages\\\\PostPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostPage = (props, id) => {\n  _s();\n\n  const [postdetails, setPostDetails] = useState(null);\n  const params = useParams();\n  const [post, setPost] = useState({\n    id: null,\n    title: \"\",\n    content: \"\",\n    imageurl: \"\",\n    likes: 0,\n    comments: []\n  });\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      const {\n        data: postData\n      } = await supabase.from('Posts').select('*').eq('id', params.id).single();\n      const {\n        data: commentsData\n      } = await supabase.from('Comments').select('*').eq('post_id', params.id);\n      setPostDetails(postData);\n      setComments(commentsData);\n    };\n\n    fetchPostDetails();\n  }, [params.id]);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPost(prev => {\n      return { ...prev,\n        [name]: value\n      };\n    });\n  };\n\n  const createComment = async event => {\n    event.preventDefault();\n    const newComment = {\n      text: post.comment,\n      author: post.author\n    }; // Fetch the existing post\n    // Fetch the existing post\n\n    let {\n      data: existingPost,\n      error\n    } = await supabase.from('Posts').select('comments').eq('id', params.id).single();\n\n    if (error) {\n      console.error('Error fetching post:', error);\n      return;\n    } // Check if existingPost.comments is an array, if not default to an empty array\n\n\n    let existingComments = Array.isArray(existingPost.comments) ? existingPost.comments : []; // Append the new comment to the existing comments\n\n    const updatedComments = [...existingComments, newComment]; // Update the post with the new array of comments\n\n    let {\n      data: updatedPost,\n      error: updateError\n    } = await supabase.from('Posts').update({\n      comments: updatedComments\n    }).eq('id', params.id);\n\n    if (updateError) {\n      console.error('Error adding comment:', updateError);\n      return;\n    }\n\n    setPostDetails(updatedPost);\n  }; // const updatePost = async (event) => {\n  //     event.preventDefault();\n  //     await supabase\n  //         .from('Posts')\n  //         .update({title: post.title, content: post.content, imageurl: post.imageurl})\n  //         .eq('id', params.id)\n  //         .select();\n  //     window.location = \"http://localhost:3000/view\";\n  // const deletePost = async (event) => {\n  //     event.preventDefault();\n  //     await supabase\n  //         .from('Posts')\n  //         .delete()\n  //         .eq('id', params.id)\n  //         .select();\n  //     window.location = \"/\";\n  //}\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: postdetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: postdetails.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: postdetails.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: postdetails.imageurl,\n        alt: \"postimage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/edit/${postdetails.id}`,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"comment\",\n          name: \"comment\",\n          placeholder: \"Leave a Comment Here\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 134\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createComment,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: comments && comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostPage, \"MymFk8bhQHYxrEeljv4YnNntKKU=\", false, function () {\n  return [useParams];\n});\n\n_c = PostPage;\nexport default PostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","supabase","PostPage","props","id","postdetails","setPostDetails","params","post","setPost","title","content","imageurl","likes","comments","setComments","fetchPostDetails","data","postData","from","select","eq","single","commentsData","handleChange","event","name","value","target","prev","createComment","preventDefault","newComment","text","comment","author","existingPost","error","console","existingComments","Array","isArray","updatedComments","updatedPost","updateError","update","map","index"],"sources":["C:/Users/narut/Documents/Full Web Code Path/Final Project/client/src/pages/PostPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { supabase } from '../client';\r\n\r\nconst PostPage = (props,id) => {\r\n    const [postdetails, setPostDetails] = useState(null);\r\n    const params = useParams();\r\n    const [post, setPost] = useState({id: null, title: \"\", content: \"\", imageurl: \"\",likes: 0, comments: []});\r\n    const [comments, setComments] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPostDetails = async () => {\r\n            const { data: postData } = await supabase\r\n                .from('Posts')\r\n                .select('*')\r\n                .eq('id', params.id)\r\n                .single();\r\n    \r\n            const { data: commentsData } = await supabase\r\n                .from('Comments')\r\n                .select('*')\r\n                .eq('post_id', params.id);\r\n    \r\n            setPostDetails(postData);\r\n            setComments(commentsData);\r\n        }\r\n    \r\n        fetchPostDetails();\r\n    }, [params.id]);\r\n\r\n    const handleChange = (event) => {\r\n        const {name, value} = event.target;\r\n        setPost( (prev) => {\r\n            return {\r\n                ...prev,\r\n                [name]:value,\r\n            }\r\n        })\r\n    }\r\n\r\n    const createComment = async (event) => {\r\n        event.preventDefault();\r\n        const newComment = { text: post.comment, author: post.author };\r\n    \r\n        // Fetch the existing post\r\n        // Fetch the existing post\r\n        let { data: existingPost, error } = await supabase\r\n        .from('Posts')\r\n        .select('comments')\r\n        .eq('id', params.id)\r\n        .single();\r\n\r\n        if (error) {\r\n        console.error('Error fetching post:', error);\r\n        return;\r\n        }\r\n\r\n        // Check if existingPost.comments is an array, if not default to an empty array\r\n        let existingComments = Array.isArray(existingPost.comments) ? existingPost.comments : [];\r\n\r\n        // Append the new comment to the existing comments\r\n        const updatedComments = [...existingComments, newComment];\r\n\r\n        // Update the post with the new array of comments\r\n        let { data: updatedPost, error: updateError } = await supabase\r\n        .from('Posts')\r\n        .update({ comments: updatedComments })\r\n        .eq('id', params.id);\r\n\r\n        if (updateError) {\r\n        console.error('Error adding comment:', updateError);\r\n        return;\r\n        }\r\n\r\n        setPostDetails(updatedPost);\r\n    }\r\n    // const updatePost = async (event) => {\r\n    //     event.preventDefault();\r\n    //     await supabase\r\n    //         .from('Posts')\r\n    //         .update({title: post.title, content: post.content, imageurl: post.imageurl})\r\n    //         .eq('id', params.id)\r\n    //         .select();\r\n        \r\n    //     window.location = \"http://localhost:3000/view\";\r\n\r\n    // const deletePost = async (event) => {\r\n    //     event.preventDefault();\r\n    //     await supabase\r\n    //         .from('Posts')\r\n    //         .delete()\r\n    //         .eq('id', params.id)\r\n    //         .select();\r\n            \r\n    //     window.location = \"/\";\r\n    //}\r\n\r\n    return (\r\n        <div>\r\n            {postdetails && (\r\n                <div className=\"Details\">\r\n                    <h1>{postdetails.title}</h1>\r\n                    <p>{postdetails.content}</p>\r\n                    <img src={postdetails.imageurl} alt=\"postimage\"/>\r\n                    {/* <button onClick={deletePost}>Delete</button>\r\n                    <button onClick={updatePost}>Update</button> */}\r\n                    <br></br>\r\n                    <Link to={`/edit/${postdetails.id}`}>Edit</Link>\r\n                    <div>\r\n                        <input type=\"text\" id=\"comment\" name=\"comment\" placeholder=\"Leave a Comment Here\"  onChange={handleChange} /><br />\r\n                        <button onClick={createComment}>Comment</button>\r\n                        <br/>\r\n                    </div>\r\n                    <div>\r\n                    {comments && comments.map((comment, index) => (\r\n                        <p key={index}>{comment.text}</p>\r\n                    ))}\r\n                </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default PostPage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}