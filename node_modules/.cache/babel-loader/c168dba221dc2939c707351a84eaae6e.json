{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\narut\\\\Documents\\\\Full Web Code Path\\\\Final Project\\\\client\\\\src\\\\pages\\\\PostPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostPage = (props, id) => {\n  _s();\n\n  const [postdetails, setPostDetails] = useState(null);\n  const params = useParams();\n  const [post, setPost] = useState({\n    id: null,\n    title: \"\",\n    content: \"\",\n    imageurl: \"\",\n    likes: 0,\n    comments: []\n  });\n  const [comments, setComments] = useState([]);\n  const [likes, setLikes] = useState(postdetails ? postdetails.likes : 0);\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      const {\n        data: postData\n      } = await supabase.from('Posts').select('*').eq('id', params.id).single();\n      let {\n        data: post,\n        error\n      } = await supabase.from('Posts').select('id, title, content, imageurl, comments, likes').eq('id', params.id).single();\n\n      if (error) {\n        console.error('Error fetching post:', error);\n        return;\n      } // Set the post details and comments in your component's state\n\n\n      setPostDetails(post);\n      setComments(post.comments);\n    };\n\n    fetchPostDetails();\n  }, [params.id]);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPost(prev => {\n      return { ...prev,\n        [name]: value\n      };\n    });\n  };\n\n  const createComment = async event => {\n    event.preventDefault();\n    const newComment = {\n      text: post.comment,\n      author: post.author\n    }; // Fetch the existing post\n    // Fetch the existing post\n\n    let {\n      data: existingPost,\n      error\n    } = await supabase.from('Posts').select('comments').eq('id', params.id).single();\n\n    if (error) {\n      console.error('Error fetching post:', error);\n      return;\n    } // Check if existingPost.comments is an array, if not default to an empty array\n\n\n    let existingComments = Array.isArray(existingPost.comments) ? existingPost.comments : []; // Append the new comment to the existing comments\n\n    const updatedComments = [...existingComments, newComment]; // Update the post with the new array of comments\n\n    let {\n      data: updatedPost,\n      error: updateError\n    } = await supabase.from('Posts').update({\n      comments: updatedComments\n    }).eq('id', params.id);\n\n    if (updateError) {\n      console.error('Error adding comment:', updateError);\n      return;\n    }\n\n    console.log(postdetails.comments);\n    setPostDetails(updatedPost);\n  };\n\n  const handleLike = async () => {\n    setLikes(likes + 1); // Increment likes\n    // Update likes in Supabase\n\n    const {\n      data,\n      error\n    } = await supabase.from('Posts') // Assuming 'posts' is your table name\n    .update({\n      likes: likes + 1\n    }).eq('id', postdetails.id); // Assuming 'id' is the unique identifier for your posts\n\n    if (error) {\n      console.error('Error updating likes:', error);\n    }\n  }; // const updatePost = async (event) => {\n  //     event.preventDefault();\n  //     await supabase\n  //         .from('Posts')\n  //         .update({title: post.title, content: post.content, imageurl: post.imageurl})\n  //         .eq('id', params.id)\n  //         .select();\n  //     window.location = \"http://localhost:3000/view\";\n  // const deletePost = async (event) => {\n  //     event.preventDefault();\n  //     await supabase\n  //         .from('Posts')\n  //         .delete()\n  //         .eq('id', params.id)\n  //         .select();\n  //     window.location = \"/\";\n  //}\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: postdetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: postdetails.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: postdetails.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: postdetails.imageurl,\n        alt: \"postimage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/edit/${postdetails.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" Edit \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLike,\n        children: \"Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: likes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"comment\",\n          name: \"comment\",\n          placeholder: \"Leave a Comment Here\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 134\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createComment,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: postdetails.comments && postdetails.comments.map((comment, index) => {\n          let commentObj = JSON.parse(comment);\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: commentObj.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostPage, \"sW6FX9ak0cX0BH2A8CZH2xNob5o=\", false, function () {\n  return [useParams];\n});\n\n_c = PostPage;\nexport default PostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","supabase","PostPage","props","id","postdetails","setPostDetails","params","post","setPost","title","content","imageurl","likes","comments","setComments","setLikes","fetchPostDetails","data","postData","from","select","eq","single","error","console","handleChange","event","name","value","target","prev","createComment","preventDefault","newComment","text","comment","author","existingPost","existingComments","Array","isArray","updatedComments","updatedPost","updateError","update","log","handleLike","map","index","commentObj","JSON","parse"],"sources":["C:/Users/narut/Documents/Full Web Code Path/Final Project/client/src/pages/PostPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { supabase } from '../client';\r\n\r\nconst PostPage = (props,id) => {\r\n    const [postdetails, setPostDetails] = useState(null);\r\n    const params = useParams();\r\n    const [post, setPost] = useState({id: null, title: \"\", content: \"\", imageurl: \"\",likes: 0, comments: []});\r\n    const [comments, setComments] = useState([]);\r\n    const [likes, setLikes] = useState(postdetails ? postdetails.likes : 0);\r\n\r\n    useEffect(() => {\r\n        const fetchPostDetails = async () => {\r\n            const { data: postData } = await supabase\r\n                .from('Posts')\r\n                .select('*')\r\n                .eq('id', params.id)\r\n                .single();\r\n    \r\n                let { data: post, error } = await supabase\r\n                .from('Posts')\r\n                .select('id, title, content, imageurl, comments, likes')\r\n                .eq('id', params.id)\r\n                .single();\r\n            \r\n            if (error) {\r\n                console.error('Error fetching post:', error);\r\n                return;\r\n            }\r\n            \r\n            // Set the post details and comments in your component's state\r\n            setPostDetails(post);\r\n            setComments(post.comments);\r\n        }\r\n    \r\n        fetchPostDetails();\r\n    }, [params.id]);\r\n\r\n    const handleChange = (event) => {\r\n        const {name, value} = event.target;\r\n        setPost( (prev) => {\r\n            return {\r\n                ...prev,\r\n                [name]:value,\r\n            }\r\n        })\r\n    }\r\n\r\n    const createComment = async (event) => {\r\n        event.preventDefault();\r\n        const newComment = { text: post.comment, author: post.author };\r\n    \r\n        // Fetch the existing post\r\n        // Fetch the existing post\r\n        let { data: existingPost, error } = await supabase\r\n        .from('Posts')\r\n        .select('comments')\r\n        .eq('id', params.id)\r\n        .single();\r\n\r\n        if (error) {\r\n        console.error('Error fetching post:', error);\r\n        return;\r\n        }\r\n\r\n        // Check if existingPost.comments is an array, if not default to an empty array\r\n        let existingComments = Array.isArray(existingPost.comments) ? existingPost.comments : [];\r\n\r\n        // Append the new comment to the existing comments\r\n        const updatedComments = [...existingComments, newComment];\r\n\r\n        // Update the post with the new array of comments\r\n        let { data: updatedPost, error: updateError } = await supabase\r\n        .from('Posts')\r\n        .update({ comments: updatedComments })\r\n        .eq('id', params.id);\r\n\r\n        if (updateError) {\r\n        console.error('Error adding comment:', updateError);\r\n        return;\r\n        }\r\n        console.log(postdetails.comments);\r\n        setPostDetails(updatedPost);\r\n    }\r\n\r\n    const handleLike = async () => {\r\n        setLikes(likes + 1); // Increment likes\r\n    \r\n        // Update likes in Supabase\r\n        const { data, error } = await supabase\r\n            .from('Posts') // Assuming 'posts' is your table name\r\n            .update({ likes: likes + 1 })\r\n            .eq('id', postdetails.id); // Assuming 'id' is the unique identifier for your posts\r\n    \r\n        if (error) {\r\n            console.error('Error updating likes:', error);\r\n        }\r\n    }\r\n\r\n    // const updatePost = async (event) => {\r\n    //     event.preventDefault();\r\n    //     await supabase\r\n    //         .from('Posts')\r\n    //         .update({title: post.title, content: post.content, imageurl: post.imageurl})\r\n    //         .eq('id', params.id)\r\n    //         .select();\r\n        \r\n    //     window.location = \"http://localhost:3000/view\";\r\n\r\n    // const deletePost = async (event) => {\r\n    //     event.preventDefault();\r\n    //     await supabase\r\n    //         .from('Posts')\r\n    //         .delete()\r\n    //         .eq('id', params.id)\r\n    //         .select();\r\n            \r\n    //     window.location = \"/\";\r\n    //}\r\n\r\n    return (\r\n        <div>\r\n            {postdetails && (\r\n                <div className=\"Details\">\r\n                    <h1>{postdetails.title}</h1>\r\n                    <p>{postdetails.content}</p>\r\n                    <img src={postdetails.imageurl} alt=\"postimage\"/>\r\n                    {/* <button onClick={deletePost}>Delete</button>\r\n                    <button onClick={updatePost}>Update</button> */}\r\n                    <br></br>\r\n                    <Link to={`/edit/${postdetails.id}`}><button> Edit </button></Link>\r\n                    <button onClick={handleLike}>Like</button>\r\n                        <p>{likes}</p>\r\n                    <div>\r\n                        <input type=\"text\" id=\"comment\" name=\"comment\" placeholder=\"Leave a Comment Here\"  onChange={handleChange} /><br />\r\n                        <button onClick={createComment}>Comment</button>\r\n                        <br/>\r\n                    </div>\r\n                    <div>\r\n                        {postdetails.comments && postdetails.comments.map((comment, index) => {\r\n                            let commentObj = JSON.parse(comment);\r\n                            return <p key={index}>{commentObj.text}</p>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default PostPage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}